# Documentation View Patterns

Based on [ButtonView.scala](mdc:doc/src/doc/views/docs/ButtonView.scala) patterns.

## File Structure
```scala
package doc.views.docs

import com.raquo.laminar.api.L.*
import doc.components.Demo
import doc.components.Locator.withLocator
import doc.libs.scalawind.*
import doc.macros.Source
import io.github.nguyenyou.webawesome.laminar.*

case class ComponentView()
    extends ExampleView("ComponentName", Some("https://webawesome.com/docs/...")) {
  
  def playground: HtmlElement = {
    Demo(
      center = true,
      content = Source.annotate {
        // Simple example
      }
    )().withLocator
  }
  
  def component: HtmlElement = {
    div(
      // Multiple Demo sections
    )
  }
}
```

## Demo Structure
- Wrap each section in `Demo()` with `title` and `description`
- Use `Source.annotate { }` for code examples
- Add `.withLocator` for development tools
- Use `// <show>` and `// </show>` comments around example code

## Styling Conventions
- Use TailwindCSS classes: `tw.flex.flexWrap.gap2`, `tw.spaceY4`
- Consistent spacing with `tw.spaceY4` instead of manual `br()`
- Group related examples in `div()` containers

## Description Formatting
- Use backticks for attribute names: `` `variant` ``
- Multiline descriptions with `stripMargin`:
```scala
description = """
| Long description here.
| Use pipes for clean formatting.
""".stripMargin
```

## Example Demo
```scala
Demo(
  title = "Variants", 
  description = "Use the `variant` attribute to set the semantic variant.",
  content = Source.annotate {
    div(
      tw.spaceY4,
      // <show>
      Component(_.variant := "brand")("Example"),
      Component(_.variant := "success")("Example")
      // </show>
    )
  }
)().withLocator
```
description:
globs:
alwaysApply: false
---
